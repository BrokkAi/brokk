package io.github.jbellis.brokk.gui.components;

import javax.swing.*;
import java.awt.*;
import java.util.function.Supplier;

import static io.github.jbellis.brokk.gui.components.SplitButtonUI.ARROW_WIDTH;

public class SplitButton extends JButton {
    private Supplier<JPopupMenu> menuSupplier;
    private JPopupMenu popupMenu; // Cache the menu

    public SplitButton(String text) {
        super(text);
        // updateUI will call setUI with the correct UI delegate.
        // This ensures our custom UI is (re)applied after L&F changes.
        updateUI();
    }

    @Override
    public void updateUI() {
        super.updateUI(); // Allow L&F to set its default UI first (e.g. FlatButtonUI)
        setUI(new SplitButtonUI()); // Then install our custom UI that extends it.
    }

    public void setMenuSupplier(Supplier<JPopupMenu> menuSupplier) {
        this.menuSupplier = menuSupplier;
        this.popupMenu = null; // Invalidate cached menu, it will be regenerated by the supplier
    }

    // Called by SplitButtonUI when the arrow area is clicked
    void showPopupMenuInternal() {
        if (!isEnabled()) {
            return;
        }
        if (menuSupplier != null) {
            // Create menu on demand if not already created or if supplier changed
            var currentMenu = menuSupplier.get();
            if (currentMenu != null) {
                popupMenu = currentMenu; // Update cached menu
                popupMenu.show(this, 0, getHeight());
            }
        }
    }

    private boolean inSuperPaint = false; // Managed by SplitButtonUI during paint

    // Called by SplitButtonUI to control margin adjustment during super.paint()
    void setInSuperPaint(boolean inSuperPaint) {
        this.inSuperPaint = inSuperPaint;
    }

    @Override
    public Insets getMargin() {
        Insets originalMargin = super.getMargin();
        if (inSuperPaint) {
            Insets m = (Insets) (super.getMargin() == null
                                 ? new Insets(0, 0, 0, 0)
                                 : super.getMargin().clone());

            // FIXME o3 and I weren't able to figure out how to center
            // the text correctly, this is the best we came up with
            // (combined with the extra space in the " Ask" label)
            m.left  += 2;
            m.right += ARROW_WIDTH;
            return m;
        }
        return originalMargin;
    }

    @Override
    public void setPreferredSize(Dimension preferredSize) {
        super.setPreferredSize(preferredSize);
    }

    @Override
    public void setMinimumSize(Dimension minimumSize) {
        super.setMinimumSize(minimumSize);
    }

    @Override
    public void setMaximumSize(Dimension maximumSize) {
        super.setMaximumSize(maximumSize);
    }
}

