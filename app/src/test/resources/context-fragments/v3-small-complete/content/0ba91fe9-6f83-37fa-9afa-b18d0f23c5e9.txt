package io.github.jbellis.brokk;

public interface IProject extends AutoCloseable {
  IGitRepo getRepo()
  DiskLruCache getDiskCache()
  Set<Language> getAnalyzerLanguages()
  Path getRoot()
  Set<ProjectFile> getAllFiles()
  Set<ProjectFile> getFiles(Language language)
  void invalidateAllFiles()
  BuildAgent.BuildDetails loadBuildDetails()
  MainProject.DataRetentionPolicy getDataRetentionPolicy()
  String getStyleGuide()
  String getReviewGuide()
  void saveReviewGuide(String reviewGuide)
  Path getMasterRootPathForConfig()
  IProject getParent()
  MainProject getMainProject()
  boolean hasGit()
  void saveBuildDetails(BuildAgent.BuildDetails details)
  CompletableFuture<BuildAgent.BuildDetails> getBuildDetailsFuture()
  Service.ModelConfig getArchitectModelConfig()
  Service.ModelConfig getCodeModelConfig()
  Service.ModelConfig getSearchModelConfig()
  void close()
  boolean hasBuildDetails()
  void saveStyleGuide(String styleGuide)
  AnalyzerRefresh getAnalyzerRefresh()
  BuildAgent.BuildDetails awaitBuildDetails()
  void setAnalyzerRefresh(AnalyzerRefresh analyzerRefresh)
  boolean isDataShareAllowed()
  void setDataRetentionPolicy(MainProject.DataRetentionPolicy selectedPolicy)
  String getJdk()
  void setJdk(@Nullable String jdkHome)
  java.awt.Rectangle getPreviewWindowBounds()
  void savePreviewWindowBounds(javax.swing.JFrame frame)
  java.awt.Rectangle getDiffWindowBounds()
  void saveDiffWindowBounds(javax.swing.JFrame frame)
  java.awt.Rectangle getOutputWindowBounds()
  void saveOutputWindowBounds(javax.swing.JFrame frame)
  java.util.Optional<java.awt.Rectangle> getMainWindowBounds()
  void saveMainWindowBounds(javax.swing.JFrame frame)
  int getHorizontalSplitPosition()
  void saveHorizontalSplitPosition(int position)
  int getLeftVerticalSplitPosition()
  void saveLeftVerticalSplitPosition(int position)
  int getRightVerticalSplitPosition()
  void saveRightVerticalSplitPosition(int position)
  List<String> loadTextHistory()
  List<String> addToInstructionsHistory(String item, int maxItems)
  java.util.List<java.util.List<String>> loadBlitzHistory()
  java.util.List<java.util.List<String>> addToBlitzHistory(
              String parallelInstructions, String postProcessingInstructions, int maxItems)
  boolean isGitHubRepo()
  boolean isGitIgnoreSet()
  void setArchitectModelConfig(Service.ModelConfig modelConfig)
  void setCodeModelConfig(Service.ModelConfig modelConfig)
  void setAskModelConfig(Service.ModelConfig modelConfig)
  void setSearchModelConfig(Service.ModelConfig modelConfig)
  String getCommitMessageFormat()
  CodeAgentTestScope getCodeAgentTestScope()
  void setCommitMessageFormat(String text)
  void setCodeAgentTestScope(CodeAgentTestScope selectedScope)
  void setAnalyzerLanguages(Set<Language> languages)
  Language getBuildLanguage()
  void setBuildLanguage(@Nullable Language language)
  String getCommandExecutor()
  void setCommandExecutor(@Nullable String executor)
  String getExecutorArgs()
  void setExecutorArgs(@Nullable String args)
  ArchitectAgent.ArchitectOptions getArchitectOptions()
  boolean getArchitectRunInWorktree()
  void setArchitectOptions(ArchitectAgent.ArchitectOptions options, boolean runInWorktree)
  McpConfig getMcpConfig()
  void setMcpConfig(McpConfig config)
  io.github.jbellis.brokk.IssueProvider getIssuesProvider()
  void setIssuesProvider(io.github.jbellis.brokk.IssueProvider provider)
  SessionManager getSessionManager()
  void sessionsListChanged()
  Set<String> getExcludedDirectories()
  IConsoleIO getConsoleIO()
  enum AnalyzerRefresh {
  }
  enum CodeAgentTestScope {
    String toString()
    CodeAgentTestScope fromString(@Nullable String value, CodeAgentTestScope defaultScope)
  }
  record Dependency(ProjectFile root, Language language) {
    private static final Logger logger = LogManager.getLogger(Dependency.class);
    java.util.Set<ProjectFile> files()
  }
}