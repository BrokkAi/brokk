{
  "completed_instances": [
    "sphinx-doc__sphinx-8719",
    "django__django-14411",
    "django__django-15799",
    "django__django-11815",
    "django__django-13315",
    "sympy__sympy-14774",
    "sympy__sympy-22005",
    "pytest-dev__pytest-9681",
    "pytest-dev__pytest-7490",
    "django__django-15061",
    "django__django-11727",
    "django__django-11583",
    "django__django-11797",
    "django__django-13569",
    "django__django-12613",
    "pylint-dev__pylint-7228",
    "scikit-learn__scikit-learn-14087",
    "astropy__astropy-12907",
    "django__django-11354",
    "matplotlib__matplotlib-18869",
    "django__django-13162",
    "django__django-16046",
    "matplotlib__matplotlib-23987",
    "django__django-13448",
    "pydata__xarray-4442",
    "scikit-learn__scikit-learn-14894",
    "pytest-dev__pytest-7500",
    "django__django-16750",
    "django__django-16041",
    "django__django-14983",
    "pytest-dev__pytest-7373",
    "sympy__sympy-16601",
    "django__django-14351",
    "django__django-12912",
    "django__django-14915",
    "sympy__sympy-23191",
    "django__django-9003",
    "sympy__sympy-18621",
    "django__django-14667",
    "scikit-learn__scikit-learn-13135",
    "django__django-15790",
    "scikit-learn__scikit-learn-10908",
    "psf__requests-1963",
    "sympy__sympy-15685",
    "matplotlib__matplotlib-13913",
    "django__django-13321",
    "sympy__sympy-15308",
    "django__django-13933",
    "pytest-dev__pytest-5227",
    "sympy__sympy-17223",
    "pallets__flask-4992",
    "sympy__sympy-21379",
    "django__django-14034",
    "matplotlib__matplotlib-24627",
    "pydata__xarray-6601",
    "django__django-11564",
    "django__django-13886",
    "django__django-14382",
    "scikit-learn__scikit-learn-15524",
    "django__django-12497",
    "scikit-learn__scikit-learn-25570",
    "django__django-10924",
    "sympy__sympy-13173",
    "django__django-16082",
    "django__django-15213"
  ],
  "results": {
    "django__django-15213": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-15213",
      "model_patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 50ff13be75..5029376c41 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -215,7 +215,11 @@ class WhereNode(tree.Node):\n         # (e.g. Oracle) doesn't support boolean expression in SELECT or GROUP\n         # BY list.\n         if not compiler.connection.features.supports_boolean_expr_in_select_clause:\n-            sql = f'CASE WHEN {sql} THEN 1 ELSE 0 END'\n+            if sql:\n+                sql = f'CASE WHEN {sql} THEN 1 ELSE 0 END'\n+            else:\n+                # Empty SQL means the condition is always true\n+                sql = '1'\n         return sql, params\n \n     def get_db_converters(self, connection):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 81.08113503456116
    },
    "django__django-11727": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11727",
      "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 60bc560df0..f574cebdda 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -55,6 +55,7 @@ def submit_row(context):\n     save_as = context['save_as']\n     show_save = context.get('show_save', True)\n     show_save_and_continue = context.get('show_save_and_continue', True)\n+    show_save_and_add_another = context.get('show_save_and_add_another', True)\n     has_add_permission = context['has_add_permission']\n     has_change_permission = context['has_change_permission']\n     has_view_permission = context['has_view_permission']\n@@ -72,7 +73,7 @@ def submit_row(context):\n         'show_save_as_new': not is_popup and has_change_permission and change and save_as,\n         'show_save_and_add_another': (\n             has_add_permission and not is_popup and\n-            (not save_as or add) and can_save\n+            (not save_as or add) and can_save and show_save_and_add_another\n         ),\n         'show_save_and_continue': can_save_and_continue,\n         'show_save': show_save and can_save,\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 53.45788836479187
    },
    "django__django-14382": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14382",
      "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 38.82874035835266
    },
    "django__django-11564": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11564",
      "model_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..63ae198551 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -332,7 +332,22 @@ class FileSystemStorage(Storage):\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        final_url = urljoin(self.base_url, url)\n+        \n+        # Add SCRIPT_NAME prefix if available and URL is relative\n+        if not final_url.startswith(('http://', 'https://', '//')):\n+            # Try to get SCRIPT_NAME from thread-local storage or middleware\n+            try:\n+                from django.core.context_processors import get_current_request\n+                request = get_current_request()\n+                if request and hasattr(request, 'META'):\n+                    script_name = request.META.get('SCRIPT_NAME', '').rstrip('/')\n+                    if script_name:\n+                        final_url = script_name + final_url\n+            except (ImportError, AttributeError):\n+                pass\n+        \n+        return final_url\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/template/context_processors.py b/django/template/context_processors.py\nindex 0e9efb2f69..7e115a18be 100644\n--- a/django/template/context_processors.py\n+++ b/django/template/context_processors.py\n@@ -67,14 +67,24 @@ def static(request):\n     \"\"\"\n     Add static-related context variables to the context.\n     \"\"\"\n-    return {'STATIC_URL': settings.STATIC_URL}\n+    static_url = settings.STATIC_URL\n+    if static_url and not static_url.startswith(('http://', 'https://', '//')):\n+        script_name = request.META.get('SCRIPT_NAME', '').rstrip('/')\n+        if script_name:\n+            static_url = script_name + static_url\n+    return {'STATIC_URL': static_url}\n \n \n def media(request):\n     \"\"\"\n     Add media-related context variables to the context.\n     \"\"\"\n-    return {'MEDIA_URL': settings.MEDIA_URL}\n+    media_url = settings.MEDIA_URL\n+    if media_url and not media_url.startswith(('http://', 'https://', '//')):\n+        script_name = request.META.get('SCRIPT_NAME', '').rstrip('/')\n+        if script_name:\n+            media_url = script_name + media_url\n+    return {'MEDIA_URL': media_url}\n \n \n def request(request):\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..24f352853b 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -100,7 +100,16 @@ class StaticNode(template.Node):\n \n     def url(self, context):\n         path = self.path.resolve(context)\n-        return self.handle_simple(path)\n+        url = self.handle_simple(path)\n+        \n+        # Add SCRIPT_NAME prefix if available in request context\n+        request = context.get('request')\n+        if request and hasattr(request, 'META'):\n+            script_name = request.META.get('SCRIPT_NAME', '').rstrip('/')\n+            if script_name and not url.startswith(('http://', 'https://', '//')):\n+                url = script_name + url\n+        \n+        return url\n \n     def render(self, context):\n         url = self.url(context)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 60.524595975875854
    },
    "matplotlib__matplotlib-18869": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "matplotlib__matplotlib-18869",
      "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..1cccd457f6 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -148,6 +148,33 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global version_info  # cache it.\n+        # Get the version string first\n+        version_str = __getattr__(\"__version__\")\n+        # Parse it using packaging.version\n+        parsed_version = parse_version(version_str)\n+        \n+        # Convert to tuple format similar to sys.version_info\n+        # Handle different version formats (release, pre-release, dev, etc.)\n+        version_tuple = []\n+        if hasattr(parsed_version, 'release'):\n+            version_tuple.extend(parsed_version.release)\n+        \n+        # Add pre-release info if present\n+        if hasattr(parsed_version, 'pre') and parsed_version.pre:\n+            version_tuple.extend(parsed_version.pre)\n+        \n+        # Add dev info if present  \n+        if hasattr(parsed_version, 'dev') and parsed_version.dev is not None:\n+            version_tuple.extend(('dev', parsed_version.dev))\n+            \n+        # Add local info if present\n+        if hasattr(parsed_version, 'local') and parsed_version.local:\n+            version_tuple.extend(('local', parsed_version.local))\n+            \n+        version_info = tuple(version_tuple)\n+        return version_info\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 40.733651876449585
    },
    "pytest-dev__pytest-9681": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pytest-dev__pytest-9681",
      "model_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex def5fa94b..32c3a0f65 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -601,6 +601,7 @@ def insert_missing_modules(modules: Dict[str, ModuleType], module_name: str) ->\n     otherwise \"src.tests.test_foo\" is not importable by ``__import__``.\n     \"\"\"\n     module_parts = module_name.split(\".\")\n+    child_module = module_name\n     while module_name:\n         if module_name not in modules:\n             module = ModuleType(\n@@ -608,6 +609,18 @@ def insert_missing_modules(modules: Dict[str, ModuleType], module_name: str) ->\n                 doc=\"Empty module created by pytest's importmode=importlib.\",\n             )\n             modules[module_name] = module\n+            \n+            # If this intermediate module corresponds to a directory with __init__.py,\n+            # set it up as a package to avoid import conflicts\n+            if module_name != child_module:  # Don't modify the original module\n+                # Reconstruct the path from the module name\n+                current_path = Path.cwd()\n+                for part in module_name.split(\".\"):\n+                    current_path = current_path / part\n+                    if current_path.is_dir() and (current_path / \"__init__.py\").exists():\n+                        # Set up the module as a package\n+                        module.__path__ = [str(current_path)]\n+                        module.__package__ = module_name\n         module_parts.pop(-1)\n         module_name = \".\".join(module_parts)\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 57.36927556991577
    },
    "django__django-14411": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14411",
      "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..25d500962b 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -50,6 +50,9 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n         context['summary'] = summary\n         return context\n \n+    def id_for_label(self, id_):\n+        return None\n+\n \n class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 48.199159383773804
    },
    "django__django-14983": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14983",
      "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 9077660467..e79d5fe031 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -157,6 +157,7 @@ class Command(BaseCommand):\n             loader.project_state(),\n             ProjectState.from_apps(apps),\n             questioner,\n+            disk_migrations=loader.disk_migrations,\n         )\n \n         # If they want to make an empty migration, make one for each app\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 3276320a1e..b6d7ac7192 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -28,11 +28,12 @@ class MigrationAutodetector:\n     if it wishes, with the caveat that it may not always be possible.\n     \"\"\"\n \n-    def __init__(self, from_state, to_state, questioner=None):\n+    def __init__(self, from_state, to_state, questioner=None, disk_migrations=None):\n         self.from_state = from_state\n         self.to_state = to_state\n         self.questioner = questioner or MigrationQuestioner()\n         self.existing_apps = {app for app, model in from_state.models}\n+        self.disk_migrations = disk_migrations or {}\n \n     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):\n         \"\"\"\n@@ -1278,7 +1279,17 @@ class MigrationAutodetector:\n             if app_leaf is None:\n                 next_number = 1\n             else:\n-                next_number = (self.parse_number(app_leaf[1]) or 0) + 1\n+                # Find the highest migration number from all disk migrations for this app\n+                max_number = 0\n+                for (disk_app_label, disk_migration_name) in self.disk_migrations:\n+                    if disk_app_label == app_label:\n+                        migration_number = self.parse_number(disk_migration_name)\n+                        if migration_number and migration_number > max_number:\n+                            max_number = migration_number\n+                \n+                # Use the higher of: leaf node number or highest disk migration number\n+                leaf_number = (self.parse_number(app_leaf[1]) or 0)\n+                next_number = max(max_number, leaf_number) + 1\n             # Name each migration\n             for i, migration in enumerate(migrations):\n                 if i == 0 and app_leaf:\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 112.51490354537964
    },
    "django__django-12613": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-12613",
      "model_patch": "diff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py\nindex 07de9428e7..5e99b9ea20 100644\n--- a/django/core/serializers/xml_serializer.py\n+++ b/django/core/serializers/xml_serializer.py\n@@ -76,7 +76,11 @@ class Serializer(base.Serializer):\n         # Get a \"string version\" of the object's data.\n         if getattr(obj, field.name) is not None:\n             try:\n-                self.xml.characters(field.value_to_string(obj))\n+                content = field.value_to_string(obj)\n+                # Ensure content is always a string (handle JSONField and similar)\n+                if not isinstance(content, str):\n+                    content = str(content)\n+                self.xml.characters(content)\n             except UnserializableContentError:\n                 raise ValueError(\"%s.%s (pk:%s) contains unserializable characters\" % (\n                     obj.__class__.__name__, field.name, obj.pk))\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 45.96955919265747
    },
    "sympy__sympy-18621": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-18621",
      "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..b821c42845 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -301,7 +301,7 @@ def blocks(self):\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n                         for j in range(len(mats))]\n                         for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        return ImmutableDenseMatrix(data, evaluate=False)\n \n     @property\n     def shape(self):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 62.72272253036499
    },
    "django__django-13886": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13886",
      "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 15d9b7fd86..1f11f59968 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -6,6 +6,7 @@ from itertools import chain\n from django.apps import apps\n from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n+from django.core.exceptions import FieldError\n \n \n @register(Tags.models)\n@@ -208,3 +209,44 @@ def _check_lazy_references(apps, ignore=None):\n @register(Tags.models)\n def check_lazy_references(app_configs=None, **kwargs):\n     return _check_lazy_references(apps)\n+\n+\n+@register(Tags.models)\n+def check_model_indexes(app_configs=None, **kwargs):\n+    \"\"\"Check that functional indexes don't reference non-existent fields.\"\"\"\n+    errors = []\n+    if app_configs is None:\n+        models = apps.get_models()\n+    else:\n+        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n+    \n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+            for index in model._meta.indexes:\n+                if hasattr(index, 'expressions') and index.expressions:\n+                    # This is a functional index, validate field references\n+                    for expression in index.expressions:\n+                        try:\n+                            # Try to resolve the expression against the model\n+                            # This will raise FieldError if fields don't exist\n+                            from django.db.models.sql import Query\n+                            query = Query(model)\n+                            query.resolve_expression(expression, allow_joins=False)\n+                        except FieldError as e:\n+                            errors.append(\n+                                Error(\n+                                    \"Index '%s' contains an expression that references \"\n+                                    \"the non-existent field '%s'.\" % (\n+                                        index.name or '<unnamed>',\n+                                        str(e).split(\"'\")[1] if \"'\" in str(e) else 'unknown'\n+                                    ),\n+                                    obj=model,\n+                                    id='models.E033',\n+                                )\n+                            )\n+                        except Exception:\n+                            # Catch any other exceptions that might occur during resolution\n+                            # and skip validation for this expression\n+                            pass\n+    \n+    return errors\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 54.674659729003906
    },
    "django__django-11583": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11583",
      "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 25c3b44250..37078d54aa 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -139,9 +139,9 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n+        except (FileNotFoundError, ValueError):\n             # The module could have been removed, don't fail loudly if this\n-            # is the case.\n+            # is the case. ValueError can occur with embedded null bytes.\n             continue\n         results.add(resolved_path)\n     return frozenset(results)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 24.09052348136902
    },
    "sympy__sympy-22005": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-22005",
      "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..674322d4eb 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 58419f8762..1181b63167 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], x, y))\n \n \n def test_solve_biquadratic():\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 42.11984348297119
    },
    "django__django-16046": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-16046",
      "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..e952af3fdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -68,7 +68,7 @@ def format(\n             str_number = \"{:f}\".format(number)\n     else:\n         str_number = str(number)\n-    if str_number[0] == \"-\":\n+    if str_number and str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n     # decimal part\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 29.13424801826477
    },
    "pydata__xarray-6601": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pydata__xarray-6601",
      "model_patch": "",
      "success": true,
      "changes": false,
      "error": null,
      "execution_time": 8.505667924880981
    },
    "sympy__sympy-14774": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-14774",
      "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a3ead157c1..f3b7669e96 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -740,7 +740,7 @@ def _print_Function(self, expr, exp=None):\n                 len(args) == 1 and \\\n                 not self._needs_function_brackets(expr.args[0])\n \n-            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n+            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]\n \n             # If the function is an inverse trig function, handle the style\n             if func in inv_trig_table:\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 42.68435001373291
    },
    "scikit-learn__scikit-learn-14894": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-14894",
      "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe8375..5767dc9599 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,16 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            # Handle case with no support vectors\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size // n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 26.543540477752686
    },
    "django__django-14351": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14351",
      "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7264929da8..d89fb9cddf 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -225,7 +225,13 @@ class SQLCompiler:\n             select_idx += 1\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n-            cols = self.get_default_columns()\n+            # For subqueries, only select the primary key to avoid\n+            # \"subquery must return only one column\" errors in IN lookups\n+            if self.query.subquery and not self.query.select:\n+                pk_col = self.query.get_meta().pk.get_col(self.query.get_initial_alias())\n+                cols = [pk_col]\n+            else:\n+                cols = self.get_default_columns()\n         else:\n             # self.query.select is a special case. These columns never go to\n             # any model.\n@@ -240,6 +246,7 @@ class SQLCompiler:\n                 'model': self.query.model,\n                 'select_fields': select_list,\n             }\n+=======\n         for alias, annotation in self.query.annotation_select.items():\n             annotations[alias] = select_idx\n             select.append((annotation, alias))\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 33.87907958030701
    },
    "django__django-13321": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13321",
      "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..cbdacd2c16 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -132,8 +132,8 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 29.052722454071045
    },
    "django__django-15799": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-15799",
      "model_patch": "",
      "success": true,
      "changes": false,
      "error": null,
      "execution_time": 69.03901600837708
    },
    "django__django-12912": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-12912",
      "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8b10829eb8..f35ed27707 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -71,7 +71,9 @@ class Aggregate(Func):\n         extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n-                filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n+                # For aggregate queries, resolve filter in the context of the outer query\n+                # to properly handle references to annotation fields\n+                filter_sql, filter_params = compiler.compile(self.filter)\n                 template = self.filter_template % extra_context.get('template', self.template)\n                 sql, params = super().as_sql(\n                     compiler, connection, template=template, filter=filter_sql,\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 38.20298957824707
    },
    "django__django-14034": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14034",
      "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..74fd58b4ee 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1023,10 +1023,23 @@ class MultiValueField(Field):\n             value = self.widget.decompress(value)\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n-                    raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n+            if self.required:\n+            raise ValidationError(self.error_messages['required'], code='required')\n+            elif not self.require_all_fields:\n+            # Even if the MultiValueField is not required, we still need to\n+            # validate individual required fields when require_all_fields=False\n+            for i, field in enumerate(self.fields):\n+            if field.required:\n+            try:\n+            field_value = value[i] if value and i < len(value) else None\n+            except (IndexError, TypeError):\n+            field_value = None\n+            if field_value in self.empty_values:\n+            raise ValidationError(self.error_messages['required'], code='required')\n+            return self.compress([])\n+            else:\n+            return self.compress([])\n+            =======\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 18.508336305618286
    },
    "scikit-learn__scikit-learn-10908": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-10908",
      "model_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd6320..789e101cc7 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -993,6 +993,9 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n         self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 19.506071090698242
    },
    "sympy__sympy-15308": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-15308",
      "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a0eb97792e..f74f4eb23f 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -2190,6 +2190,9 @@ def _print_Tr(self, p):\n         contents = self._print(p.args[0])\n         return r'\\mbox{Tr}\\left(%s\\right)' % (contents)\n \n+    def _print_Trace(self, expr):\n+        return r'\\operatorname{Tr}\\left(%s\\right)' % self._print(expr.arg)\n+\n     def _print_totient(self, expr, exp=None):\n         if exp is not None:\n             return r'\\left(\\phi\\left(%s\\right)\\right)^{%s}' % (self._print(expr.args[0]),\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 36.09554743766785
    },
    "pylint-dev__pylint-7228": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pylint-dev__pylint-7228",
      "model_patch": "diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex eda1a583d..2267451ac 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -252,9 +252,19 @@ class _ArgumentsManager:\n \n     def _parse_configuration_file(self, arguments: list[str]) -> None:\n         \"\"\"Parse the arguments found in a configuration file into the namespace.\"\"\"\n-        self.config, parsed_args = self._arg_parser.parse_known_args(\n-            arguments, self.config\n-        )\n+        try:\n+            self.config, parsed_args = self._arg_parser.parse_known_args(\n+                arguments, self.config\n+            )\n+        except re.error as exc:\n+            if r\"\\p{\" in str(exc):\n+                raise ValueError(\n+                    f\"Invalid regex pattern: {exc}. \"\n+                    \"Unicode property escapes like \\\\p{{Han}} are not supported by Python's built-in 're' module. \"\n+                    \"Consider using character classes like [\\\\u4e00-\\\\u9fff] for Chinese characters, \"\n+                    \"or install the 'regex' module which supports Unicode properties.\"\n+                ) from exc\n+            raise\n         unrecognized_options: list[str] = []\n         for opt in parsed_args:\n             if opt.startswith(\"--\"):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 26.973005294799805
    },
    "matplotlib__matplotlib-23987": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "matplotlib__matplotlib-23987",
      "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..014cef6919 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2422,13 +2422,15 @@ class Figure(FigureBase):\n                     \"The Figure parameters 'tight_layout' and \"\n                     \"'constrained_layout' cannot be used together. Please use \"\n                     \"'layout' parameter\")\n-            self.set_layout_engine(layout='tight')\n-            if isinstance(tight_layout, dict):\n-                self.get_layout_engine().set(**tight_layout)\n+            if tight_layout:\n+                self.set_layout_engine(layout='tight')\n+                if isinstance(tight_layout, dict):\n+                    self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 28.798495054244995
    },
    "django__django-9003": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-9003",
      "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d1c4e5446b..af736c73aa 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -573,7 +573,11 @@ class Query(object):\n             # combined query must have two joins, too.\n             reuse.discard(new_alias)\n             if alias != new_alias:\n-                change_map[alias] = new_alias\n+                # Resolve any transitive mappings to prevent circular references\n+                final_alias = new_alias\n+                while final_alias in change_map:\n+                    final_alias = change_map[final_alias]\n+                change_map[alias] = final_alias\n             if not rhs.alias_refcount[alias]:\n                 # The alias was unused in the rhs query. Unref it so that it\n                 # will be unused in the new query, too. We have to add and\n@@ -803,7 +807,7 @@ class Query(object):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n-        assert set(change_map.keys()).intersection(set(change_map.values())) == set()\n+        assert not set(change_map.keys()).intersection(set(change_map.values()))\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 49.7488317489624
    },
    "pytest-dev__pytest-7500": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pytest-dev__pytest-7500",
      "model_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 6a0bf7f6f..08ddeb614 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -330,10 +330,10 @@ def cleanup_numbered_dir(\n     root: Path, prefix: str, keep: int, consider_lock_dead_if_created_before: float\n ) -> None:\n     \"\"\"cleanup for lock driven numbered directories\"\"\"\n-    for path in cleanup_candidates(root, prefix, keep):\n-        try_cleanup(path, consider_lock_dead_if_created_before)\n     for path in root.glob(\"garbage-*\"):\n         try_cleanup(path, consider_lock_dead_if_created_before)\n+    for path in cleanup_candidates(root, prefix, keep):\n+        try_cleanup(path, consider_lock_dead_if_created_before)\n \n \n def make_numbered_dir_with_cleanup(\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 26.797745943069458
    },
    "django__django-11797": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11797",
      "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 180f4a41fc..72694a9144 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1301,6 +1301,13 @@ class QuerySet:\n             raise TypeError('Cannot use multi-field values as a filter value.')\n         query = self.query.resolve_expression(*args, **kwargs)\n         query._db = self._db\n+        # Preserve the original field selection and grouping when values() is used\n+        if self._fields and hasattr(self.query, 'values_select'):\n+            # Ensure the resolved query maintains its values() field selection\n+            query.values_select = self.query.values_select\n+            # Preserve group_by if it was set by values() and annotate()\n+            if self.query.group_by is not None:\n+                query.group_by = self.query.group_by\n         return query\n     resolve_expression.queryset_only = True\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 163.94654488563538
    },
    "sympy__sympy-15685": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-15685",
      "model_patch": "diff --git a/sympy/physics/units/quantities.py b/sympy/physics/units/quantities.py\nindex 8677f7ce57..bb9a83434c 100644\n--- a/sympy/physics/units/quantities.py\n+++ b/sympy/physics/units/quantities.py\n@@ -108,7 +108,7 @@ def set_scale_factor(self, scale_factor, unit_system=\"SI\"):\n         # replace all prefixes by their ratio to canonical units:\n         scale_factor = scale_factor.replace(lambda x: isinstance(x, Prefix), lambda x: x.scale_factor)\n         # replace all quantities by their ratio to canonical units:\n-        scale_factor = scale_factor.replace(lambda x: isinstance(x, Quantity), lambda x: x.scale_factor)\n+        scale_factor = scale_factor.replace(lambda x: isinstance(x, Quantity), lambda x: x._scale_factor)\n         Quantity.SI_quantity_scale_factors[self] = scale_factor\n \n     @property\n@@ -130,21 +130,21 @@ def abbrev(self):\n         return self._abbrev\n \n     @property\n-    def scale_factor(self):\n+    def _scale_factor(self):\n         \"\"\"\n         Overall magnitude of the quantity as compared to the canonical units.\n         \"\"\"\n         return Quantity.SI_quantity_scale_factors.get(self, S.One)\n \n     def _eval_is_positive(self):\n-        return self.scale_factor.is_positive\n+        return self._scale_factor.is_positive\n \n     def _eval_is_constant(self):\n-        return self.scale_factor.is_constant()\n+        return self._scale_factor.is_constant()\n \n     def _eval_Abs(self):\n-        scale_factor = Abs(self.scale_factor)\n-        if scale_factor == self.scale_factor:\n+        scale_factor = Abs(self._scale_factor)\n+        if scale_factor == self._scale_factor:\n             return self\n         return None\n         q = self.func(self.name, self.abbrev)\n@@ -179,7 +179,7 @@ def get_dimensional_expr(expr):\n     def _collect_factor_and_dimension(expr):\n         \"\"\"Return tuple with factor expression and dimension expression.\"\"\"\n         if isinstance(expr, Quantity):\n-            return expr.scale_factor, expr.dimension\n+            return expr._scale_factor, expr.dimension\n         elif isinstance(expr, Mul):\n             factor = 1\n             dimension = Dimension(1)\n@@ -246,4 +246,4 @@ def convert_to(self, other):\n     @property\n     def free_symbols(self):\n         \"\"\"Return free symbols from quantity.\"\"\"\n-        return self.scale_factor.free_symbols\n+        return self._scale_factor.free_symbols\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 32.86336088180542
    },
    "django__django-16041": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-16041",
      "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 57676428ff..85e43640ac 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -257,12 +257,14 @@ class BaseFormSet(RenderableFormMixin):\n \n     @property\n     def empty_form(self):\n+        kwargs = self.get_form_kwargs(None)\n+        kwargs.pop('empty_permitted', None)\n         form = self.form(\n             auto_id=self.auto_id,\n             prefix=self.add_prefix(\"__prefix__\"),\n             empty_permitted=True,\n             use_required_attribute=False,\n-            **self.get_form_kwargs(None),\n+            **kwargs,\n             renderer=self.renderer,\n         )\n         self.add_fields(form, None)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 21.162004947662354
    },
    "matplotlib__matplotlib-24627": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "matplotlib__matplotlib-24627",
      "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 6c18ba1a64..1ae306a026 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -949,6 +949,20 @@ default: %(va)s\n             ax.clear()\n             self.delaxes(ax)  # Remove ax from self._axstack.\n \n+        # Deparent all artists before clearing the lists\n+        for artist in self.artists:\n+            artist.figure = None\n+        for artist in self.lines:\n+            artist.figure = None\n+        for artist in self.patches:\n+            artist.figure = None\n+        for artist in self.texts:\n+            artist.figure = None\n+        for artist in self.images:\n+            artist.figure = None\n+        for artist in self.legends:\n+            artist.figure = None\n+\n         self.artists = []\n         self.lines = []\n         self.patches = []\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 74.17224264144897
    },
    "scikit-learn__scikit-learn-15524": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-15524",
      "model_patch": "diff --git a/sklearn/utils/metaestimators.py b/sklearn/utils/metaestimators.py\nindex e091bd0f7c..8c3586b9df 100644\n--- a/sklearn/utils/metaestimators.py\n+++ b/sklearn/utils/metaestimators.py\n@@ -190,12 +190,13 @@ def _safe_split(estimator, X, y, indices, train_indices=None):\n         if not hasattr(X, \"shape\"):\n             raise ValueError(\"Precomputed kernels or affinity matrices have \"\n                              \"to be passed as arrays or sparse matrices.\")\n-        # X is a precomputed square kernel matrix\n-        if X.shape[0] != X.shape[1]:\n-            raise ValueError(\"X should be a square kernel matrix\")\n         if train_indices is None:\n+            # X is a precomputed square kernel matrix\n+            if X.shape[0] != X.shape[1]:\n+                raise ValueError(\"X should be a square kernel matrix\")\n             X_subset = X[np.ix_(indices, indices)]\n         else:\n+            # X is a precomputed kernel matrix, we slice it to get a rectangular matrix\n             X_subset = X[np.ix_(indices, train_indices)]\n     else:\n         X_subset = _safe_indexing(X, indices)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 114.14047479629517
    },
    "pytest-dev__pytest-7373": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pytest-dev__pytest-7373",
      "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..537e0c70f 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -12,23 +12,8 @@ from ..outcomes import TEST_OUTCOME\n from .structures import Mark\n from _pytest.config import Config\n from _pytest.nodes import Item\n-from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n-\n-\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n \n \n class MarkEvaluator:\n@@ -97,9 +82,12 @@ class MarkEvaluator:\n                 for expr in args:\n                     self.expr = expr\n                     if isinstance(expr, str):\n+                        import _pytest._code\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n                     else:\n+=======\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n                             msg = (\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 20.64940881729126
    },
    "astropy__astropy-12907": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "astropy__astropy-12907",
      "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 31.590407133102417
    },
    "django__django-16082": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-16082",
      "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab82..cbf4fd8296 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -533,6 +533,7 @@ _connector_combinations = [\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 22.506996154785156
    },
    "django__django-11815": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11815",
      "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..dbdd7f4726 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        imports = {'import %s' % module}\n+        return \"%s.%s['%s']\" % (module, enum_class.__name__, self.value.name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 19.701754808425903
    },
    "sympy__sympy-17223": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-17223",
      "model_patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\nindex 5e45075f76..5bfe1b747a 100644\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -950,8 +950,18 @@ def matches(self, expr, repl_dict={}, old=False):\n             return AssocOp._matches_commutative(self, expr, repl_dict, old)\n         elif self.is_commutative is not expr.is_commutative:\n             return None\n+        \n+        # For non-commutative expressions, we need to be more careful about structure\n+        # If both expressions have non-commutative factors, we should match them\n+        # as a whole rather than separating commutative and non-commutative parts\n         c1, nc1 = self.args_cnc()\n         c2, nc2 = expr.args_cnc()\n+        \n+        # If both expressions have non-commutative parts, use the more strict _matches method\n+        # to preserve the order of multiplication\n+        if nc1 and nc2:\n+            return self._matches(expr, repl_dict)\n+        \n         repl_dict = repl_dict.copy()\n         if c1:\n             if not c2:\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 310.0627682209015
    },
    "pytest-dev__pytest-7490": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pytest-dev__pytest-7490",
      "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 186c53ed3..f2017546b 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -300,10 +300,22 @@ class TestReport(BaseReport):\n         keywords = {x: 1 for x in item.keywords}\n         excinfo = call.excinfo\n         sections = []\n+        # Check for xfail markers first\n+        xfail_marker = item.get_closest_marker(\"xfail\")\n+        \n         if not call.excinfo:\n             outcome = \"passed\"  # type: Literal[\"passed\", \"failed\", \"skipped\"]\n             # TODO: Improve this Any.\n             longrepr = None  # type: Optional[Any]\n+            \n+            # Handle xfail marker when test unexpectedly passes\n+            if xfail_marker is not None:\n+                if xfail_marker.kwargs.get(\"strict\", False):\n+                    outcome = \"failed\"\n+                    longrepr = \"[XPASS(strict)] \" + xfail_marker.kwargs.get(\"reason\", \"\")\n+                else:\n+                    # This will be handled by the test runner as XPASS\n+                    pass\n         else:\n             if not isinstance(excinfo, ExceptionInfo):\n                 outcome = \"failed\"\n@@ -313,13 +325,19 @@ class TestReport(BaseReport):\n                 r = excinfo._getreprcrash()\n                 longrepr = (str(r.path), r.lineno, r.message)\n             else:\n-                outcome = \"failed\"\n-                if call.when == \"call\":\n-                    longrepr = item.repr_failure(excinfo)\n-                else:  # exception in setup or teardown\n-                    longrepr = item._repr_failure_py(\n-                        excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n-                    )\n+                # Handle xfail marker when test fails as expected\n+                if xfail_marker is not None:\n+                    outcome = \"skipped\"\n+                    longrepr = (str(item.fspath), item.location[1], \n+                               \"[XFAIL] \" + xfail_marker.kwargs.get(\"reason\", \"\"))\n+                else:\n+                    outcome = \"failed\"\n+                    if call.when == \"call\":\n+                        longrepr = item.repr_failure(excinfo)\n+                    else:  # exception in setup or teardown\n+                        longrepr = item._repr_failure_py(\n+                            excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n+                        )\n         for rwhen, key, content in item._report_sections:\n             sections.append((\"Captured {} {}\".format(key, rwhen), content))\n         return cls(\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 34.09915804862976
    },
    "django__django-15790": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-15790",
      "model_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..05d2c529d6 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -58,7 +58,8 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n             libraries[module_name].append(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        if module_path not in libraries[module_name]:\n+            libraries[module_name].append(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 21.007400035858154
    },
    "scikit-learn__scikit-learn-14087": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-14087",
      "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae7..6a89530535 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[:, best_indices[i], i, :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 32.55809259414673
    },
    "django__django-11354": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-11354",
      "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..9bf4f4a912 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -455,7 +455,8 @@ class Query(BaseExpression):\n                 )\n                 if inner_query.default_cols and has_existing_aggregate_annotations:\n                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n-                inner_query.default_cols = False\n+                if not existing_annotations:\n+                    inner_query.default_cols = False\n \n             relabels = {t: 'subquery' for t in inner_query.alias_map}\n             relabels[None] = 'subquery'\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 23.98031520843506
    },
    "django__django-12497": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-12497",
      "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8ddbb5ba68..536b3dd601 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1309,7 +1309,7 @@ class ManyToManyField(RelatedField):\n                              \"through_fields keyword argument.\") % (self, from_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n@@ -1329,7 +1329,7 @@ class ManyToManyField(RelatedField):\n                             \"through_fields keyword argument.\" % (self, to_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 45.83331274986267
    },
    "scikit-learn__scikit-learn-25570": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-25570",
      "model_patch": "",
      "success": true,
      "changes": false,
      "error": null,
      "execution_time": 78.35054874420166
    },
    "sympy__sympy-21379": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-21379",
      "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex bfec61de64..e39a2be182 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4394,9 +4394,19 @@ def _parallel_poly_from_expr(exprs, opt):\n     if not opt.gens:\n         raise PolificationFailed(opt, origs, exprs, True)\n \n+    # Filter out Piecewise expressions from generators before processing\n+    opt.gens = tuple(k for k in opt.gens if not isinstance(k, Piecewise))\n+    \n+    # Filter out Piecewise expressions from generators - they should be treated\n+    # as part of the coefficient structure, not as polynomial variables\n+    filtered_gens = []\n     for k in opt.gens:\n         if isinstance(k, Piecewise):\n-            raise PolynomialError(\"Piecewise generators do not make sense\")\n+            # Skip Piecewise expressions as generators\n+            continue\n+        filtered_gens.append(k)\n+    opt.gens = tuple(filtered_gens)\n+=======\n \n     coeffs_list, lengths = [], []\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 46.93596005439758
    },
    "django__django-13448": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13448",
      "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 503f7f56fd..093bb59943 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -74,7 +74,7 @@ class BaseDatabaseCreation:\n         # and store it on the connection. This slightly horrific process is so people\n         # who are testing on databases without transactions or who are using\n         # a TransactionTestCase still get a clean database on every test run.\n-        if serialize:\n+        if serialize and self.connection.settings_dict['TEST']['MIGRATE']:\n             self.connection._test_serialized_contents = self.serialize_db_to_string()\n \n         call_command('createcachetable', database=self.connection.alias)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 21.946776866912842
    },
    "django__django-13569": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13569",
      "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 04e430a42e..37a77be982 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -129,7 +129,12 @@ class SQLCompiler:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+                # Skip Random expressions as they shouldn't affect grouping\n+                group_by_cols = []\n+                for col in expr.get_group_by_cols():\n+                    if not isinstance(col, Random):\n+                        group_by_cols.append(col)\n+                expressions.extend(group_by_cols)\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 25.26403260231018
    },
    "sympy__sympy-16601": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-16601",
      "model_patch": "diff --git a/sympy/geometry/parabola.py b/sympy/geometry/parabola.py\nindex ac669102bc..2ac4984b8c 100644\n--- a/sympy/geometry/parabola.py\n+++ b/sympy/geometry/parabola.py\n@@ -335,6 +335,48 @@ def intersection(self, o):\n         else:\n             raise TypeError('Wrong type of argument were put')\n \n+\n+        p : number or symbolic expression\n+\n+        Notes\n+        =====\n+\n+        The absolute value of p is the focal length. The sign on p tells\n+        which way the parabola faces. Vertical parabolas that open up\n+        and horizontal that open right, give a positive value for p.\n+        Vertical parabolas that open down and horizontal that open left,\n+        give a negative value for p.\n+\n+\n+        See Also\n+        ========\n+\n+        http://www.sparknotes.com/math/precalc/conicsections/section2.rhtml\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import Parabola, Point, Line\n+        >>> p1 = Parabola(Point(0, 0), Line(Point(5, 8), Point(7, 8)))\n+        >>> p1.p_parameter\n+        -4\n+\n+        \"\"\"\n+        if (self.axis_of_symmetry.slope == 0):\n+            x = -(self.directrix.coefficients[2])\n+            if (x < self.focus.args[0]):\n+                p = self.focal_length\n+            else:\n+                p = -self.focal_length\n+        else:\n+            y = -(self.directrix.coefficients[2])\n+            if (y > self.focus.args[1]):\n+                p = -self.focal_length\n+            else:\n+                p = self.focal_length\n+\n+        return p\n+=======\n     @property\n     def p_parameter(self):\n         \"\"\"P is a parameter of parabola.\n@@ -354,6 +396,51 @@ def p_parameter(self):\n         give a negative value for p.\n \n \n+        See Also\n+        ========\n+\n+        http://www.sparknotes.com/math/precalc/conicsections/section2.rhtml\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import Parabola, Point, Line\n+        >>> p1 = Parabola(Point(0, 0), Line(Point(5, 8), Point(7, 8)))\n+        >>> p1.p_parameter\n+        -4\n+\n+        \"\"\"\n+        from sympy import sign\n+        \n+        if (self.axis_of_symmetry.slope == 0):\n+            # Horizontal axis of symmetry (vertical parabola)\n+            directrix_x = -(self.directrix.coefficients[2])\n+            # The p_parameter is positive if focus is to the right of directrix\n+            diff = self.focus.args[0] - directrix_x\n+            p = sign(diff) * self.focal_length\n+        else:\n+            # Vertical axis of symmetry (horizontal parabola)  \n+            directrix_y = -(self.directrix.coefficients[2])\n+            # The p_parameter is positive if focus is above directrix\n+            diff = self.focus.args[1] - directrix_y\n+            p = sign(diff) * self.focal_length\n+\n+        return p\n+=======\n+        =======\n+\n+        p : number or symbolic expression\n+\n+        Notes\n+        =====\n+\n+        The absolute value of p is the focal length. The sign on p tells\n+        which way the parabola faces. Vertical parabolas that open up\n+        and horizontal that open right, give a positive value for p.\n+        Vertical parabolas that open down and horizontal that open left,\n+        give a negative value for p.\n+\n+\n         See Also\n         ========\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 44.90426158905029
    },
    "django__django-13162": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13162",
      "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex c8c688ec94..acc6376771 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -295,10 +295,12 @@ class Command(BaseCommand):\n                 subclass = type(\"Migration\", (Migration,), {\n                     \"dependencies\": [(app_label, migration.name) for migration in merge_migrations],\n                 })\n-                migration_name = \"%04i_%s\" % (\n-                    biggest_number + 1,\n-                    self.migration_name or (\"merge_%s\" % get_migration_name_timestamp())\n-                )\n+                if self.migration_name:\n+                    migration_name = \"%04i_%s\" % (biggest_number + 1, self.migration_name)\n+                else:\n+                    # Create name by combining the names of migrations being merged\n+                    merged_migration_names = \"_\".join(sorted(migration.name for migration in merge_migrations))\n+                    migration_name = \"%04i_merge_%s\" % (biggest_number + 1, merged_migration_names)\n                 new_migration = subclass(migration_name, app_label)\n                 writer = MigrationWriter(new_migration, self.include_header)\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 26.10051941871643
    },
    "django__django-10924": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-10924",
      "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..fe079e9767 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1667,6 +1667,12 @@ class FilePathField(Field):\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n+    \n+    def _get_path(self):\n+        \"\"\"Get the resolved path, calling it if it's a callable.\"\"\"\n+        if callable(self.path):\n+            return self.path()\n+        return self.path\n \n     def check(self, **kwargs):\n         return [\n@@ -1709,7 +1715,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self._get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 34.62909150123596
    },
    "scikit-learn__scikit-learn-13135": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "scikit-learn__scikit-learn-13135",
      "model_patch": "diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex dd969c12b2..0b4a8e7195 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -172,6 +172,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers = np.sort(centers)\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 22.967936277389526
    },
    "pallets__flask-4992": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pallets__flask-4992",
      "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..6f2f22ac 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\",\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,8 +245,8 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n-            import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"rb\")\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -254,6 +255,9 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which to open the file. Defaults to ``\"r\"``\n+            for text mode. Use ``\"rb\"`` for binary mode when using loaders\n+            that require binary input.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +265,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 23.481639623641968
    },
    "django__django-14915": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14915",
      "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 20.01382350921631
    },
    "matplotlib__matplotlib-13913": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "matplotlib__matplotlib-13913",
      "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 08916606a3..46d3671e71 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -225,7 +225,10 @@ def _to_rgba_no_colorcycle(c, alpha=None):\n             return tuple(color)\n         # string gray.\n         try:\n-            return (float(c),) * 3 + (alpha if alpha is not None else 1.,)\n+            gray = float(c)\n+            if gray < 0 or gray > 1:\n+                raise ValueError(\"RGBA values should be within 0-1 range\")\n+            return (gray,) * 3 + (alpha if alpha is not None else 1.,)\n         except ValueError:\n             pass\n         raise ValueError(\"Invalid RGBA argument: {!r}\".format(orig_c))\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 27.26612401008606
    },
    "sphinx-doc__sphinx-8719": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sphinx-doc__sphinx-8719",
      "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 4f9261360..c855cc835 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,6 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -540,6 +539,12 @@ class Abbreviation(SphinxRole):\n         return [nodes.abbreviation(self.rawtext, text, **options)], []\n \n \n+class Kbd(SphinxRole):\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        node = nodes.literal(self.rawtext, self.text, classes=['kbd'])\n+        return [node], []\n+\n+\n def index_role(typ: str, rawtext: str, text: str, lineno: int, inliner: Inliner,\n                options: Dict = {}, content: List[str] = []\n                ) -> Tuple[List[Node], List[system_message]]:\n@@ -608,6 +613,7 @@ specific_docroles = {\n     'menuselection': MenuSelection(),\n     'file': EmphasizedLiteral(),\n     'samp': EmphasizedLiteral(),\n+    'kbd': Kbd(),\n     'abbr': Abbreviation(),\n }  # type: Dict[str, RoleFunction]\n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 32.53910183906555
    },
    "pydata__xarray-4442": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pydata__xarray-4442",
      "model_patch": "",
      "success": true,
      "changes": false,
      "error": null,
      "execution_time": 12.081400871276855
    },
    "django__django-14667": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-14667",
      "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8837881579..c603f4f9e8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2086,7 +2086,14 @@ class Query(BaseExpression):\n             self.deferred_loading = existing.union(field_names), True\n         else:\n             # Remove names from the set of any existing \"immediate load\" names.\n-            self.deferred_loading = existing.difference(field_names), False\n+            remaining_fields = existing.difference(field_names)\n+            if remaining_fields:\n+                # Still have some immediate load fields remaining\n+                self.deferred_loading = remaining_fields, False\n+            else:\n+                # All immediate load fields have been deferred, switch to defer mode\n+                # and defer the fields that were requested to be deferred\n+                self.deferred_loading = frozenset(field_names), True\n \n     def add_immediate_loading(self, field_names):\n         \"\"\"\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 92.67731094360352
    },
    "psf__requests-1963": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "psf__requests-1963",
      "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..4bb6c728 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,9 +86,10 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = req.copy()\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -99,7 +100,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n+            method = prepared_request.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 26.59189248085022
    },
    "django__django-13933": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13933",
      "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..e03a3803cd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 23.091689109802246
    },
    "django__django-16750": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-16750",
      "model_patch": "diff --git a/django/db/models/functions/text.py b/django/db/models/functions/text.py\nindex 8715e86898..34421eb15d 100644\n--- a/django/db/models/functions/text.py\n+++ b/django/db/models/functions/text.py\n@@ -42,6 +42,7 @@ class PostgreSQLSHAMixin:\n class Chr(Transform):\n     function = \"CHR\"\n     lookup_name = \"chr\"\n+    output_field = CharField()\n \n     def as_mysql(self, compiler, connection, **extra_context):\n         return super().as_sql(\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 24.594848155975342
    },
    "django__django-15061": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-15061",
      "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 00c19e2c55..e2d871647c 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -848,10 +848,6 @@ class MultiWidget(Widget):\n         context['widget']['subwidgets'] = subwidgets\n         return context\n \n-    def id_for_label(self, id_):\n-        if id_:\n-            id_ += '_0'\n-        return id_\n \n     def value_from_datadict(self, data, files, name):\n         return [\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 23.392006874084473
    },
    "pytest-dev__pytest-5227": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "pytest-dev__pytest-5227",
      "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 47.45170068740845
    },
    "sympy__sympy-23191": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-23191",
      "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 66461181d0..1e0bc66177 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1145,12 +1145,11 @@ def _print_BasisDependent(self, expr):\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n                 if '\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n-                    for paren in range(len(tempstr)):\n-                        flag[i] = 1\n-                        if tempstr[paren] == '\\N{right parenthesis extension}':\n-                            tempstr = tempstr[:paren] + '\\N{right parenthesis extension}'\\\n-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n-                            break\n+                    flag[i] = 1\n+                    # Find the last line and append the vector component there\n+                    lines = tempstr.split('\\n')\n+                    lines[-1] = lines[-1] + ' ' + vectstrs[i]\n+                    tempstr = '\\n'.join(lines)\n                 elif '\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n                     flag[i] = 1\n                     tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS LOWER HOOK}',\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 48.43250322341919
    },
    "sympy__sympy-13173": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "sympy__sympy-13173",
      "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex ff6fedc17b..9d8955cb49 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4420,6 +4420,11 @@ def degree(f, gen=0):\n     if isNum:\n         return S.Zero if f else S.NegativeInfinity\n \n+    # Check if this is a multivariate polynomial and no generator was specified\n+    if gen == 0 and len(p.gens) > 1:\n+        raise PolynomialError(\"degree of multivariate polynomials is ambiguous, \"\n+                            \"specify a generator (gen) to get the degree in that variable\")\n+\n     if not sympify(gen, strict=True).is_Number:\n         if f.is_Poly and gen not in p.gens:\n             # try recast without explicit gens\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 79.66235041618347
    },
    "django__django-13315": {
      "model_name_or_path": "brokk-cli",
      "instance_id": "django__django-13315",
      "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..86c277fff4 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -415,6 +415,9 @@ class RelatedField(FieldCacheMixin, Field):\n             defaults.update({\n                 'limit_choices_to': limit_choices_to,\n             })\n+            # Apply distinct to avoid duplicates when limit_choices_to involves joins\n+            if 'queryset' in kwargs and limit_choices_to:\n+                kwargs['queryset'] = kwargs['queryset'].distinct()\n         defaults.update(kwargs)\n         return super().formfield(**defaults)\n \n@@ -986,9 +989,13 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n+        queryset = self.remote_field.model._default_manager.using(using)\n+        # Apply distinct to avoid duplicates when limit_choices_to involves joins\n+        if self.remote_field.limit_choices_to:\n+            queryset = queryset.distinct()\n         return super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n+            'queryset': queryset,\n             'to_field_name': self.remote_field.field_name,\n             **kwargs,\n             'blank': self.blank,\n",
      "success": true,
      "changes": true,
      "error": null,
      "execution_time": 57.22227144241333
    }
  },
  "eval_start_time": 1760412823.9520102,
  "last_checkpoint": "2025-10-14T08:22:08.727273",
  "checkpoint_count": 65
}