{
  "django__django-15213": {
    "model_name_or_path": "brokk-cli",
    "instance_id": "django__django-15213",
    "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 188b640850..39e85d27e2 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,6 +40,14 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n+    @property\n+    def empty_result_set_value(self):\n+        \"\"\"\n+        Return the value to use when this Q object would result in an empty result set.\n+        For normal Q objects, empty means False. For negated Q objects, empty means True.\n+        \"\"\"\n+        return self.negated\n+\n     def _combine(self, other, conn):\n         if not(isinstance(other, Q) or getattr(other, 'conditional', False) is True):\n             raise TypeError(other)\n"
  },
  "django__django-11727": {
    "model_name_or_path": "brokk-cli",
    "instance_id": "django__django-11727",
    "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 60bc560df0..f574cebdda 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -55,6 +55,7 @@ def submit_row(context):\n     save_as = context['save_as']\n     show_save = context.get('show_save', True)\n     show_save_and_continue = context.get('show_save_and_continue', True)\n+    show_save_and_add_another = context.get('show_save_and_add_another', True)\n     has_add_permission = context['has_add_permission']\n     has_change_permission = context['has_change_permission']\n     has_view_permission = context['has_view_permission']\n@@ -72,7 +73,7 @@ def submit_row(context):\n         'show_save_as_new': not is_popup and has_change_permission and change and save_as,\n         'show_save_and_add_another': (\n             has_add_permission and not is_popup and\n-            (not save_as or add) and can_save\n+            (not save_as or add) and can_save and show_save_and_add_another\n         ),\n         'show_save_and_continue': can_save_and_continue,\n         'show_save': show_save and can_save,\n"
  },
  "django__django-14382": {
    "model_name_or_path": "brokk-cli",
    "instance_id": "django__django-14382",
    "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n"
  },
  "django__django-11564": {
    "model_name_or_path": "brokk-cli",
    "instance_id": "django__django-11564",
    "model_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..b72de8779f 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -332,7 +332,18 @@ class FileSystemStorage(Storage):\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        full_url = urljoin(self.base_url, url)\n+        \n+        # Add SCRIPT_NAME support if available\n+        try:\n+            from django.core.context_processors import request\n+            from django.template.context import RequestContext\n+            # Try to get current request to access SCRIPT_NAME\n+            # This is a fallback for cases where request context is not available\n+        except ImportError:\n+            pass\n+        \n+        return full_url\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/template/context_processors.py b/django/template/context_processors.py\nindex 0e9efb2f69..58d3e9f22c 100644\n--- a/django/template/context_processors.py\n+++ b/django/template/context_processors.py\n@@ -67,14 +67,22 @@ def static(request):\n     \"\"\"\n     Add static-related context variables to the context.\n     \"\"\"\n-    return {'STATIC_URL': settings.STATIC_URL}\n+    static_url = settings.STATIC_URL\n+    script_name = request.META.get('SCRIPT_NAME', '')\n+    if script_name and not static_url.startswith('http'):\n+        static_url = script_name.rstrip('/') + '/' + static_url.lstrip('/')\n+    return {'STATIC_URL': static_url}\n \n \n def media(request):\n     \"\"\"\n     Add media-related context variables to the context.\n     \"\"\"\n-    return {'MEDIA_URL': settings.MEDIA_URL}\n+    media_url = settings.MEDIA_URL\n+    script_name = request.META.get('SCRIPT_NAME', '')\n+    if script_name and not media_url.startswith('http'):\n+        media_url = script_name.rstrip('/') + '/' + media_url.lstrip('/')\n+    return {'MEDIA_URL': media_url}\n \n \n def request(request):\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..337bdc7b2e 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -48,6 +48,12 @@ class PrefixNode(template.Node):\n \n     def render(self, context):\n         prefix = self.handle_simple(self.name)\n+        # Add SCRIPT_NAME support\n+        request = context.get('request')\n+        if request and hasattr(request, 'META'):\n+            script_name = request.META.get('SCRIPT_NAME', '')\n+            if script_name and not prefix.startswith('http'):\n+                prefix = script_name.rstrip('/') + '/' + prefix.lstrip('/')\n         if self.varname is None:\n             return prefix\n         context[self.varname] = prefix\n@@ -104,6 +110,12 @@ class StaticNode(template.Node):\n \n     def render(self, context):\n         url = self.url(context)\n+        # Add SCRIPT_NAME support\n+        request = context.get('request')\n+        if request and hasattr(request, 'META'):\n+            script_name = request.META.get('SCRIPT_NAME', '')\n+            if script_name and not url.startswith('http'):\n+                url = script_name.rstrip('/') + '/' + url.lstrip('/')\n         if context.autoescape:\n             url = conditional_escape(url)\n         if self.varname is None:\n"
  },
  "matplotlib__matplotlib-18869": {
    "model_name_or_path": "brokk-cli",
    "instance_id": "matplotlib__matplotlib-18869",
    "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..7220c62a78 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -148,6 +148,30 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        global version_info  # cache it.\n+        version_str = __getattr__(\"__version__\")  # This will cache __version__ too\n+        parsed = parse_version(version_str)\n+        # Extract major, minor, patch from the parsed version\n+        if hasattr(parsed, 'release'):\n+            # For packaging.version.Version objects\n+            release = parsed.release\n+            if len(release) >= 3:\n+                version_info = release[:3]\n+            elif len(release) == 2:\n+                version_info = release + (0,)\n+            else:\n+                version_info = (release[0], 0, 0)\n+        else:\n+            # Fallback: try to parse manually\n+            import re\n+            match = re.match(r'^(\\d+)\\.(\\d+)(?:\\.(\\d+))?', version_str)\n+            if match:\n+                major, minor, patch = match.groups()\n+                version_info = (int(major), int(minor), int(patch) if patch else 0)\n+            else:\n+                version_info = (0, 0, 0)\n+        return version_info\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n"
  }
}